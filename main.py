import os
import time
import telebot
from telebot import types
from faker import Faker
import random

bot = telebot.TeleBot(token='6869832595:AAEl-iSWnwwa64WdnuVhtVgVNRl8wYnbTrQ', parse_mode='html')

faker = Faker()

formats = ['.jpg', '.png', '.svg', '.gif', '.ico', '.mp4', '.avi', '.webm', '.doc', '.docx', '.xls', '.xlsx', '.txt', '.pdf', '.css', '.html', '.js', '.json', '.zip', '.rar']
card_types = ['VISA', 'Mastercard', 'Maestro', 'JCB']

card_type_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
card_type_keyboard.add('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç')

file_format_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
file_format_keyboard.add(*formats)

card_types_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
card_types_keyboard.add(*card_types)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëãüèª\n–Ø –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=card_type_keyboard)

@bot.message_handler(func=lambda message: message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç')
def generate_card_type(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:", reply_markup=card_types_keyboard)

@bot.message_handler(func=lambda message: message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤')
def generate_file_format(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "waiting_for_file_format"
    user_state[message.chat.id] = "waiting_for_file_format"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:", reply_markup=file_format_keyboard)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "waiting_for_file_format")
def handle_file_format(message):
    bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "waiting_for_file_size"
    user_state[message.chat.id] = "waiting_for_file_size"
    user_state[f"{message.chat.id}_format"] = message.text

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "waiting_for_file_size")
def handle_file_size(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∏—Å–ª–æ–º
    try:
        file_size = int(message.text)
        if file_size <= 0:
            raise ValueError("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        
        # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size}.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º
        format_selected = user_state[f"{message.chat.id}_format"]
        generate_file(message.chat.id, format_selected, file_size)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state[message.chat.id] = None
        user_state[f"{message.chat.id}_format"] = None
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
def generate_file(chat_id, file_format, file_size):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = int(time.time())
    filename = f'{timestamp}-{file_size}-bytes{file_format}'

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞–π—Ç—ã
    with open(filename, "wb") as f:
        random_bytes = os.urandom(file_size)
        f.write(random_bytes)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(filename, "rb") as f:
        bot.send_document(chat_id, f)
    
    # –£–¥–∞–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.unlink(filename)

@bot.message_handler(func=lambda message: message.text in card_types)
def handle_card_type(message):
    card_number = faker.credit_card_number(message.text.lower())
    cvv = faker.credit_card_security_code()
    bot.send_message(message.chat.id, f'–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {message.text}:\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}\nCVV: {cvv}')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

bot.polling()
